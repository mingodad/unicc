#[derive(Debug)]
struct Symbol {
	name: &'static str,
}

#[derive(Debug)]
struct Production {
	lhs: usize,
	emit: Option<&'static str>,
	rhs: Vec<usize>
}

#[derive(Debug)]
enum Action {
	Shift(usize),
	Reduce(usize),
	ShiftAndReduce(usize)
}

#[derive(Debug)]
struct State {
	default_reduce: Option<usize>,
	actions: Vec<Action>
}

#[derive(Debug)]
struct Parser {
	symbols: [Symbol; {{len(unicc.grammar.symbols)}}],
	productions: [Production; {{len(unicc.grammar.productions)}}],
	states: [State; {{len(unicc.states)}}]
}

fn main() {
	let parser = Parser{
		symbols: [{{#unicc.grammar.symbols}}
			Symbol{name: "{{replace(name, "\\", "\\\\")}}"},{{/}}
		],
		productions: [{{#unicc.grammar.productions}}
			Production{
				lhs: {{lhs}},
				emit: {{#emit}}Some("{{emit}}"){{|}}None{{/}},
				rhs: vec![{{#rhs}}{{loop.item}}, {{/}}]
			},{{/}}
		],
		states: [{{#unicc.states}}
			State{
				default_reduce: 
					{{-# loop.item["reduce-default"] < 0 -}}
						None
					{{-|-}}
						Some({{loop.item["reduce-default"]}})
					{{-/}},
				actions: vec![
					{{-#actions}}
					Action::
						{{-#action == "shift"}}Shift({{state}})
						{{-|action == "reduce"}}Reduce({{production}})
						{{-|}}ShiftAndReduce({{production}}){{/}},
					{{-/}}
				],
			},{{/}}
		]
	};

	println!("{:?}", parser);
}
